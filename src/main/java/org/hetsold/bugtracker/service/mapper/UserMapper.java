package org.hetsold.bugtracker.service.mapper;

import org.hetsold.bugtracker.dto.FullUserDetails;
import org.hetsold.bugtracker.dto.MinimalRegistrationData;
import org.hetsold.bugtracker.dto.SecurityUserDTO;
import org.hetsold.bugtracker.dto.UserDTO;
import org.hetsold.bugtracker.model.SecurityUser;
import org.hetsold.bugtracker.model.User;

import java.util.List;
import java.util.stream.Collectors;

public class UserMapper {

    public static User getUser(UserDTO userDTO) {
        if (userDTO != null) {
            User user = new User();
            user.setUuid(UUIDMapper.getUUID(userDTO));
            mapDataFields(userDTO, user);
            return user;
        }
        return null;
    }

    public static User getUserWithAutoGeneratedId(UserDTO userDTO) {
        User user = new User();
        mapDataFields(userDTO, user);
        return user;
    }

    private static void mapDataFields(UserDTO userDTO, User user) {
        user.setFirstName(userDTO.getFirstName());
        user.setLastName(userDTO.getLastName());
    }

    public static UserDTO getUserDTO(User user) {
        return new UserDTO(user);
    }

    public static List<UserDTO> getUserDTOS(List<User> userList) {
        return userList.stream().map(UserMapper::getUserDTO).collect(Collectors.toList());
    }

    public static SecurityUser getSecurityUser(SecurityUserDTO securityUserDTO) {
        if (securityUserDTO != null) {
            SecurityUser securityUser = new SecurityUser();
            securityUser.setUuid(UUIDMapper.getUUID(securityUserDTO));
            securityUser.setUsername(securityUserDTO.getUsername());
            securityUser.setPassword(securityUserDTO.getPassword());
            securityUser.setEnabled(securityUserDTO.isEnabled());
            securityUser.setCredentialsNonExpired(securityUserDTO.isCredentialsNonExpired());
            securityUser.setAccountNonLocked(securityUserDTO.isAccountNonLocked());
            securityUser.setAccountNonExpired(securityUserDTO.isAccountNonExpired());
            securityUser.getAuthorities().addAll(securityUserDTO.getAuthorities());
            return securityUser;
        }
        return null;
    }

    public static SecurityUser getSecurityUser(MinimalRegistrationData minimalRegistrationData) {
        if (minimalRegistrationData != null) {
            SecurityUser securityUser = new SecurityUser();
            securityUser.setUuid(null);
            securityUser.setUsername(minimalRegistrationData.getLogin());
            securityUser.setPassword(minimalRegistrationData.getPassword());
            securityUser.setEmail(minimalRegistrationData.getEmail());
            return securityUser;
        }
        return null;
    }

    public static FullUserDetails getFullUserDetails(SecurityUser securityUser) {
        return new FullUserDetails(securityUser);
    }

    public static SecurityUserDTO getSecurityUserDTO(SecurityUser securityUser) {
        return new SecurityUserDTO(securityUser);
    }
}