package org.hetsold.bugtracker.service;

import org.hetsold.bugtracker.dao.UserDAO;
import org.hetsold.bugtracker.dao.util.Contract;
import org.hetsold.bugtracker.dto.UserDTO;
import org.hetsold.bugtracker.facade.UserMapper;
import org.hetsold.bugtracker.model.SecurityUser;
import org.hetsold.bugtracker.model.User;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;


@Service
public class DefaultUserService implements UserService {
    private UserDAO userDAO;

    public DefaultUserService() {
    }

    @Autowired
    public DefaultUserService(UserDAO userDAO) {
        this.userDAO = userDAO;
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public UserDTO registerUser(UserDTO userDTO, SecurityUser securityUser) {
        if (userDTO == null || userDTO.getLastName().isEmpty() || userDTO.getFirstName().isEmpty()) {
            throw new IllegalArgumentException("incorrect user: user data required");
        }
        User userForSave = UserMapper.getUserWithAutoGeneratedId(userDTO);
        userDAO.save(userForSave);
        securityUser.setUser(userForSave);
        userDAO.save(securityUser);
        return UserMapper.getUserDTO(userForSave);
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public UserDTO updateUser(UserDTO userDTO) {
        User updatedUser = UserMapper.getUser(userDTO);
        if (userDTO == null || userDTO.getUuid().isEmpty() || updatedUser == null) {
            throw new IllegalArgumentException("incorrect user: id is empty or user not exists");
        }
        if (userDTO.getLastName() == null || userDTO.getLastName().isEmpty() || userDTO.getFirstName() == null || userDTO.getFirstName().isEmpty()) {
            throw new IllegalArgumentException("incorrect user: user firstname and lastname required");
        }
        User user = getUserById(userDTO.getUuid());
        user.update(updatedUser);
        return UserMapper.getUserDTO(user);
    }

    @Override
    public User getUserById(String uuid) {
        if (uuid == null || uuid.isEmpty()) {
            throw new IllegalArgumentException("incorrect user uuid: user uuid cannot be null or empty");
        }
        return userDAO.getUserById(uuid);
    }

    @Override
    @Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
    public UserDTO getUserDTOById(String uuid) {
        if (uuid == null || uuid.isEmpty()) {
            throw new IllegalArgumentException("incorrect user");
        }
        return UserMapper.getUserDTO(getUserById(uuid));
    }

    @Override
    public void delete(String uuid) {
        if (uuid == null || uuid.isEmpty()) {
            throw new IllegalArgumentException("incorrect user uuid: user uuid cannot be null or empty");
        }
        User user = getUserById(uuid);
        userDAO.delete(user);
    }

    @Override
    @Transactional(propagation = Propagation.REQUIRED)
    public void delete(UserDTO userDTO) {
        if (userDTO == null || userDTO.getUuid() == null || userDTO.getUuid().isEmpty()) {
            throw new IllegalArgumentException("incorrect user: user id cannot be null or empty");
        }
        delete(userDTO.getUuid());
    }

    @Override
    @Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
    public List<UserDTO> getUsers(Contract contract, int first, int count) {
        return UserMapper.getUserDTOS(userDAO.getUsers(contract, first, count));
    }

    @Override
    @Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
    public long getUsersCount(Contract contract) {
        return userDAO.getUsersCount(contract);
    }

    @Override
    @Transactional(propagation = Propagation.SUPPORTS, readOnly = true)
    public UserDetails loadUserByUsername(String login) throws UsernameNotFoundException {
        UserDetails userDetails = userDAO.getSecUserByUsername(login);
        if (userDetails != null) {
            return userDetails;
        } else {
            throw new UsernameNotFoundException("login error");
        }
    }

    public boolean isLoginTaken(String login) {
        return userDAO.isLoginTaken(login);
    }
}