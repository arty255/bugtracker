package org.hetsold.bugtracker.facade;

import org.hetsold.bugtracker.dto.IssueDTO;
import org.hetsold.bugtracker.dto.IssueShortDTO;
import org.hetsold.bugtracker.model.Issue;

import java.util.List;
import java.util.stream.Collectors;

public class IssueMapper {

    public static Issue getIssue(IssueDTO issueDTO) {
        Issue issue = null;
        if (issueDTO != null) {
            issue = new Issue();
            issue.setUuid(issueDTO.getUuid());
            mapDataFields(issueDTO, issue);
        }
        return issue;
    }

    public static Issue getIssue(IssueShortDTO issueShortDTO) {
        Issue issue = null;
        if (issueShortDTO != null) {
            issue = new Issue();
            issue.setUuid(issueShortDTO.getUuid());
            mapShortDataFields(issueShortDTO, issue);
        }
        return issue;
    }

    public static Issue getIssueWithAutoGeneratedId(IssueShortDTO issueShortDTO) {
        Issue issue = new Issue();
        mapShortDataFields(issueShortDTO, issue);
        return issue;
    }

    public static Issue getIssueWithAutoGeneratedId(IssueDTO issueDTO) {
        Issue issue = new Issue();
        mapDataFields(issueDTO, issue);
        return issue;
    }

    private static void mapDataFields(IssueDTO issueDTO, Issue issue) {
        issue.setIssueNumber(issueDTO.getIssueNumber());
        issue.setDescription(issueDTO.getDescription());
        issue.setCurrentIssueState(issueDTO.getCurrentIssueState());
        issue.setSeverity(issueDTO.getSeverity());
        issue.setProductVersion(issueDTO.getProductVersion());
        issue.setReproduceSteps(issueDTO.getReproduceSteps());
        issue.setExistedResult(issueDTO.getExistedResult());
        issue.setExistedResult(issueDTO.getExpectedResult());
        issue.setFixVersion(issueDTO.getFixVersion());
        issue.setCurrentIssueState(issueDTO.getCurrentIssueState());
        issue.setArchived(issueDTO.getArchived());
        if (issueDTO.getAssignedTo() != null) {
            issue.setAssignedTo(UserMapper.getUser(issueDTO.getAssignedTo()));
        }
    }

    private static void mapShortDataFields(IssueShortDTO issueDTO, Issue issue) {
        issue.setIssueNumber(issueDTO.getIssueNumber());
        issue.setDescription(issueDTO.getDescription());
        issue.setCurrentIssueState(issueDTO.getCurrentIssueState());
        issue.setSeverity(issueDTO.getSeverity());
    }

    public static IssueDTO getIssueDTO(Issue issue) {
        return new IssueDTO(issue);
    }

    public static IssueShortDTO getIssueShortDTO(Issue issue) {
        return new IssueShortDTO(issue);
    }

    public static List<IssueDTO> getIssueDTOList(List<Issue> issues) {
        return issues.stream()
                .map(IssueDTO::new)
                .collect(Collectors.toList());
    }

    public static List<IssueShortDTO> getShortDTOList(List<Issue> issues) {
        return issues.stream()
                .map(IssueShortDTO::new)
                .collect(Collectors.toList());
    }
}